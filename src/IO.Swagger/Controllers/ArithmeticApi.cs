/*
 * Arithmetic Operations API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Services;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// AritmeticController
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    public class ArithmeticApiController : ControllerBase
    {
        private readonly ICalculationService _calculationService;
        private readonly IJwtTokenService _jwtTokenService;

        ///<Summary>
        /// Set ArithmeticApiController ICalculationService
        ///</Summary>
        public ArithmeticApiController(ICalculationService calculationService, IJwtTokenService jwtTokenService)
        {
            _calculationService = calculationService;
            _jwtTokenService = jwtTokenService;
        }
        ///<Summary>
        /// Post Calculate
        ///</Summary>
        [HttpPost("calculate")]
        [Authorize] // Only authenticated users can access this method
        public ActionResult<double> Calculate([FromHeader] string operation, [FromBody]OperationRequest model)
        {
            // check if model==null
            if (model == null)
            {
                return BadRequest("Model data is required.");
            }

            //check if Both numbers has value
            if (!model.Number1.HasValue || !model.Number2.HasValue)
            {
                return BadRequest("Both numbers are required.");
            }

            //check if operation is Empty ot null
            if (string.IsNullOrWhiteSpace(operation))
            {
                return BadRequest("Operation type is required.");
            }

            //List of operations
            var validOperations = new HashSet<string> { "add", "subtract", "multiply", "divide" };

            //check if opration contains in list
            if (!validOperations.Contains(operation.ToLower()))
            {
                return BadRequest("Invalid operation type.");
            }

            //check if number2==0
            if (operation.ToLower() == "divide" && model.Number2.Value == 0)
            {
                return BadRequest("Division by zero is not allowed.");
            }

            try
            {
                var result = _calculationService.PerformCalculation(model,operation);
                return Ok(new { Result = result });
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
        }
        ///<Summary>
        /// Post Calculate
        ///</Summary>
        [HttpPost("token")]
        public IActionResult GenerateToken([FromBody] UserModel user)
        {
            if (user == null || string.IsNullOrWhiteSpace(user.Username))
            {
                return BadRequest("Invalid user data");
            }

            var token = _jwtTokenService.GenerateToken(user.Username);
            return Ok(new { Token = token });
        }
    }
}